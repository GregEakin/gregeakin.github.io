@page "/page/{fileName}"
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Blog @fileName</PageTitle>
@if (string.IsNullOrWhiteSpace(_content))
{
    <p><em>Loading...</em></p>
}
else
{
    <h1 class="post-title p-name" itemprop="name headline">@PageTitle</h1>
    <p class="post-meta">
        Originally published
        <time class="dt-published" datetime="@Date.ToString("R")" itemprop="datePublished">@TimeAgo(Date)
        </time>.</p>

    <div class="post-content e-content" itemprop="articleBody">@((MarkupString)Body)</div>

    <a class="u-url" href="/page/@fileName" hidden></a>
}

@code {
    [Parameter] public string fileName { get; set; } = string.Empty;

    private string? _content;
    private string PageTitle { get; set; } = string.Empty;
    private DateTime Date { get; set; } = DateTime.Now;
    private string Body { get; set; } = string.Empty;

    private readonly MarkdownPipeline _pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseYamlFrontMatter()
        .UseEmojiAndSmiley()
        .Build();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _content = await Http.GetStringAsync($"_posts/{fileName}.md");
            var document = Markdown.Parse(_content, _pipeline);

            var yamlBlock = document.Descendants<YamlFrontMatterBlock>().FirstOrDefault();
            if (yamlBlock != null)
            {
                var yaml = _content.Substring(yamlBlock.Span.Start + 3, yamlBlock.Span.Length - 6);
                var deserializer = new YamlDotNet.Serialization.Deserializer();
                var frontMatter = deserializer.Deserialize<Dictionary<string, string>>(yaml);
                foreach (var (key, value) in frontMatter)
                {
                    // layout
                    // categories
                    if (key.Equals("title", StringComparison.OrdinalIgnoreCase))
                    {
                        PageTitle = value;
                    }
                    else if (key.Equals("date", StringComparison.OrdinalIgnoreCase))
                    {
                        Date = FormatDate(value);
                    }
                }
            }

            Body = document.ToHtml(_pipeline);
            await InvokeAsync(StateHasChanged);
            InitializeMermaidAndMathJax();
        }
        catch (Exception ex)
        {
            _content = null;
            Console.WriteLine(ex.Message);
        }
    }

    private void InitializeMermaidAndMathJax()
    {
        JS.InvokeVoidAsync("initializeMermaidAndMathJax");
    }

    private static string TimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalDays > 365)
        {
            var years = (int)(timeSpan.TotalDays / 365);
            return years == 1 ? "one year ago" : $"{years} years ago";
        }
        if (timeSpan.TotalDays > 30)
        {
            var months = (int)(timeSpan.TotalDays / 30);
            return months == 1 ? "one month ago" : $"{months} months ago";
        }
        if (timeSpan.TotalDays > 1)
        {
            var days = (int)timeSpan.TotalDays;
            return days == 1 ? "one day ago" : $"{days} days ago";
        }
        if (timeSpan.TotalHours > 1)
        {
            var hours = (int)timeSpan.TotalHours;
            return hours == 1 ? "one hour ago" : $"{hours} hours ago";
        }
        if (timeSpan.TotalMinutes > 1)
        {
            var minutes = (int)timeSpan.TotalMinutes;
            return minutes == 1 ? "one minute ago" : $"{minutes} minutes ago";
        }
        if (timeSpan.TotalSeconds >= 1)
        {
            var seconds = (int)timeSpan.TotalSeconds;
            return seconds == 1 ? "one second ago" : $"{seconds} seconds ago";
        }
        return "just now";
    }

    private static DateTime FormatDate(string value)
    {
        return DateTime.TryParse(value, out var date) ? date : DateTime.Now;
    }
}
